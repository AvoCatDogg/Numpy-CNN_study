#CNN코드 설명
##forward
forward코드는 forward과정에서 사용되는 함수들을 정의한것이다. 

```python
def convolution(image, filt, bias, s=1): #이미지와 필터를 stride(=s)에 따라 합성곱 하는 함수를 정의해줌


    (n_f, n_c_f, f, _) = filt.shape # filter dimension Q: n_f, n_c_f의 정확한 의미, 그리고 f, _의 의미
                                    # 필터의 차원 (필터갯수, 필터차원,fxf 행렬)

    n_c, in_dim, _ = image.shape # image dimensions 
                                 # 이미지의 차원 (이미지 차원, in_dim x indim 행렬)

    out_dim = int((in_dim - f)/s)+1 # calculate output dimensions 
                                    #output의 차원을 계산함.
                                    #이와같은 차원을 가지는 이유는 계산을 하면 됨. stride에 따른 값임
    
    assert n_c == n_c_f, "Dimensions of filter must match dimensions of input image"
    #assert는 조건문이 False일때 출력되는것이다.
    
    out = np.zeros((n_f,out_dim,out_dim)) #결과값을 차원이 n_f이고 out_dim x out_dim 으로 이루어진 행렬로 정의
```
위에서 설명한 부분들은 필터와 이미지들의 차원들을 정의해준 부분이다.
아래부분부터는 본격적인 합성곱 과정을 코드로 구현한것이다. 필터가 움직이는 방식을 어떻게 구현했는지에 집중하자.

```python
for curr_f in range(n_f): #curr_f 를 n_f까지 반복하는데, 이 의미는 결국 필터의 갯수만큼 이미지를 필터와 합성곱 한다는 의미이다.

        curr_y = out_y = 0    #curr_f 와 out_y 를 0으로 리셋하는 과정이며, 쉽게 설명하면 필터의 y위치를 초기화하고, 결과값은 y가 0인 부분을 받겠다는 의미이다.
        while curr_y + f <= in_dim: #필터가 이미지의 끝부분에 도달할때까지 반복한다.
            curr_x = out_x = 0      #현재 필터의 x위치를 0으로 초기화 하고, 이때의 out의 x값은 0임

            while curr_x + f <= in_dim:# 이미지의 끝부분에 필터의 x좌표가 도달할때까지 실행
                out[curr_f, out_y, out_x] = np.sum(filt[curr_f] * image[:,curr_y:curr_y+f, curr_x:curr_x+f]) + bias[curr_f] 
                #위 과정이 합성곱의 과정이다. current f값에서의 filt값을 f크기의 격자에 들어있는 image에 모든 항 : 과 더하고, 이에 bias를 더함
                curr_x += s #현재 필터 위치에 stride를 더해줌
                out_x += 1 #다음 결과값을 받을 out행렬의 x위치를 정해줌.
            curr_y += s #위와 같음
            out_y += 1
        
    return out #convolution의 결과를 out으로 받음.
```

즉 여기서 return한 out값은 어떤 이미지와 필터를 합성곱 했을때의 결과값이 된다. 
필터가 stride에 따라 x축을 증가시키면서 움직이다가 im_dim, 즉 이미지의 끝에 도달했을때 y축을 증가시켜서 반복하는 과정이다.

```python
def maxpool(image, f=2, s=2): #maxpool은 앞서 필터를 거친 값에서 karnel안의 가장 큰 값을 뽑아내는 과정이라 생각하면 된다.


    n_c, h_prev, w_prev = image.shape #이미지 차원, height, width
    
    h = int((h_prev - f)/s)+1 #차원은 filter에 의해서 다음과 같이 됨.
    w = int((w_prev - f)/s)+1
    downsampled = np.zeros((n_c, h, w)) #처리된 샘플을 미리 zeros로 정의해줌

    for i in range(n_c):
        # slide maxpool window over each part of the image and assign the max value at each step to the output
        # maxpool 의 격자가 stride에 따라 이동하고, 이 격자내의 최대값을 받아주는 함수이다.
        curr_y = out_y = 0 #현재 kurnel의 위치를 0으로 리셋하고, 이 값은 결과값의 y=0부분에 받음
        while curr_y + f <= h_prev: #앞선 필터부분과 동일한 원리이다.
            curr_x = out_x = 0
            while curr_x + f <= w_prev:

                #앞선 합성곱 과정과 같은 원리로 작동함.
                downsampled[i, out_y, out_x] = np.max(image[i, curr_y:curr_y+f, curr_x:curr_x+f])
                #np.max에 의해 downsampled는 image에 f by f 의 칸막이중 가장 큰 값을 받게됨.

                curr_x += s
                out_x += 1
            curr_y += s
            out_y += 1
    return downsampled
```
위 값은 maxpool을 거친 행렬을 받게 되며, 이때받는 행렬의 차원은 n_c, h, w 이다.

아래는 필요한 activation funtion(=Softmax)와 loss funtion(=CEE)를 정의한다.

```python
def softmax(X): #소프트맥스 함수의 정의
    out = np.exp(X) 
    return out/np.sum(out)

def categoricalCrossEntropy(probs, label): #CCE를 정의
    return -np.sum(label * np.log(probs))
```

##CNN.util
util에는 이후에 나올 코드들에 사용되는 여러 함수들을 정의한 코드이다.
extracting data 같은 경우 gzip을 이용해 필요한 파일을 불러오는 함수이다.
extracting label 앞서 불러온 데이터들의 label을 불러온다.
initializeFilter의 경우 필터를 초기화 하는 과정이며, 첨단에서 배운 가중치 초기화 과정이라 생각하면 된다.
intializeWeight 의 경우 가중치를 초기화 하는 과정이다.
nanargmax는 제대로 이해는 못했다. 일단 최댓값을 받아주는 함수인데, nan값을 무시하는 함수인것만 알고있다.
predict는 훈련된 데이터를 통해 예측을 한번 해보는 함수이다.
```python
from CNN.forward import * #앞서 코드를 작성한  forward를 import함
import numpy as np
import gzip  #파일 압축할때 쓰는 응용소프트웨어
        
def extract_data(filename, num_images, IMAGE_WIDTH):

    '''
    Extract images by reading the file bytestream. Reshape the read values into a 3D matrix of dimensions [m, h, w], where m 
    is the number of training examples.
    이미지를 파일의 Bytestream을 읽음으로서 추출한다. 읽어준 값을 [m,h,w]의 3차원 행렬로 만들어준다. 
    m은 traning examples의 수를 의미한다.  
    '''
    
    print('Extracting', filename) #어떤 파일을 추출하는지를 알려주기 위해서 print 함
    with gzip.open(filename) as bytestream: #filename을 bytestream의 형태로 출력
        bytestream.read(16)
        buf = bytestream.read(IMAGE_WIDTH * IMAGE_WIDTH * num_images)
        data = np.frombuffer(buf, dtype=np.uint8).astype(np.float32)
        data = data.reshape(num_images, IMAGE_WIDTH*IMAGE_WIDTH)
        return data
    #이쪽 위에부분들이 이해가 안됨. gzip.read(숫자) 에서 숫자의 의미를 모르겠다.
    #np.frombuffer은 binary형태의 데이터를 array로 받는것
```

##Backward
backword 코드는 역전파 과정에서 사용되는 함수들을 정의했다.
```python

```
convolutionBackward는 convolution의 역과정이다.
maxpoolBackward는 maxpool과정의 역과정이다.



